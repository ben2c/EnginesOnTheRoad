# PostgreSQL. Versions 9.3 and up are supported.
#
# Install the pg driver:
#   gem install pg
# On macOS with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On macOS with MacPorts:
#   gem install pg -- --with-pg-config=/opt/local/lib/postgresql84/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem 'pg'
##
#default: &default
#  adapter: postgresql
#  encoding: unicode
#  # For details on connection pooling, see Rails configuration guide
#  # https://guides.rubyonrails.org/configuring.html#database-pooling
#  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
#
#development:
#  <<: *default
#  database: engines_backend_development
#
#
#test:
#  <<: *default
#  database: engines_backend_test
#
#production:
#  <<: *default
#  database: engines_backend_production
#  username: engines_backend
#  password: <%= ENV['ENGINES_BACKEND_DATABASE_PASSWORD'] %>
#

# SQLite. Versions 3.8.0 and up are supported.
#   gem install sqlite3
#
#   Ensure the SQLite 3 gem is defined in your Gemfile
#   gem 'sqlite3'
#
default: &default
  adapter: sqlite3
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  timeout: 5000

development:
  <<: *default
  database: db/development.sqlite3

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: db/test.sqlite3

production:
  <<: *default
  database: db/production.sqlite3
